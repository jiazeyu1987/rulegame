
你现在是一个产品经理,你需要将doc/下的需求文档解析成PRD文件,严格按照PRD模板来写,不要增加需求上没有的功能,不要发散,只需要完成需求文档里的内容,有不理解的地方可以提出来,如果完全理解就可以开始撰写PRD文件




你现在是 资深的产品经理、技术主管和测试主管。
请根据以下要求对“PRD.md”进行拆解和输出：
拆分规则
将PRD.md拆分为 功能开发文档。
整个开发过程划分为 10个 Epic（从 Epic1 到 Epic10，依次进行开发）。
每个 Epic 必须包含以下信息：
需求描述（该 Epic 要解决的问题、范围和价值）
开发工作量（开发人数 × 开发天数，明确数值）
开发方案（详细的技术实现思路和步骤）
Milestone（该 Epic 的阶段性目标与可交付成果，需可度量、可验证）。
格式要求
每个 Epic 输出时，请严格遵循 epic_template.md 的格式。
输出结果清晰、分层，便于直接纳入项目文档库。
语言要求：简洁、专业、可执行。
目标
输出的文档能直接作为研发团队的任务依据。
每个 Epic 之间应有合理的衔接关系，逐步完成整体需求。
不要增加需求上没有的功能,不要发散






检查doc/epic文件夹下的epic能否可以确认完成PRD里的功能,如果有缺少的内容      │
│   ,在epic11.md的文件里补充,如果没有,则不用补充   





你是一名经验丰富的 产品经理、技术主管和测试主管。请基于以下规则，将 doc/epics 文件夹下的每个 epic 进行拆解：
任务拆分规则
每个 epic 的工作量以 人天（Person-Days）为单位。
以 10 人天 为一个阶段。
如果单个 epic 的工作量为 16 人天，则拆分为 2 个子任务（10 人天 + 6 人天）。
如果为 30 人天，则拆分为 3 个子任务（10+10+10）。
子任务按顺序编号并存放到 doc/sub_epic/01, doc/sub_epic/02, …, doc/sub_epic/N 文件夹下。
1~N对应epics下epic的数量
doc/sub_epic/01文件夹下再新建01.md,02.md...0n.md,N的数量是子任务的数量
每个子任务的输出要求
开发方案：详细描述开发目标、设计方案、实现方式、关键技术点、依赖项。
Milestone：列出该子任务的关键里程碑（例如：需求评审、开发完成、联调、测试完成）。
测试方案：说明测试范围、测试用例设计方向、关键验证点（功能测试、性能测试、回归测试）。
输出格式（示例）
doc/sub_epic/01
  - 开发方案：
    1. ...
    2. ...
  - Milestone：
    - Day 1~2: 需求澄清与设计
    - Day 3~7: 功能开发
    - Day 8~9: 联调与优化
    - Day 10: 内测与交付
  - 测试方案：
    - 功能点测试：...
    - 异常测试：...
    - 性能验证：...
不要增加需求上没有的功能,不要发散







你现在是 资深技术主管和测试主管，负责 doc/ 文件夹下的所有子任务开发与测试。
请严格按照以下工作流执行：

1. 子任务遍历

从 doc/sub_epic/epic12 开始

2. 开发状态管理

每个子任务文档都包含一个 [开发状态] 字段。

状态更新规则：

未开发 → 开发中 → 待测试 → 已测试 → 子任务开发完成

每完成一个阶段，必须在子任务文档中同步更新 [开发状态]。

如果检测到任务字段有已测试并且有完整的测试输出,那么进行下一子任务开发

3. 子任务开发

在当前子任务文档中，补充或完善：

开发方案（目标、设计方案、实现方式、关键技术点、依赖项）

Milestone（分阶段目标，含时间点）

输出必须包含：

可执行的代码/伪代码

清晰的开发说明，确保研发团队能直接落地实现

4. 单元测试开发

当子任务开发完成时，在同一文件夹下新建 单元测试文档：

文件命名：子任务名.test.md 或 子任务名.test.ts

测试内容必须覆盖：

功能点测试

异常测试

性能验证

单元测试必须是 可运行代码 或 详细的测试用例计划。

5. 测试执行与结果统计

执行单元测试后，输出：

测试用例总数

通过数

失败数

通过率（%）

将结果写入单元测试文档，同时更新子任务文档的 [开发状态]：

测试通过 → 已测试 → 子任务开发完成

测试未通过 → 返回 开发中，并修复后重新测试

6. 循环与收尾

当前子任务完成后，自动进入下一个子任务（如 doc/02）。

当所有子任务完成时，生成一份 全局统计报告：

总子任务数

完成数

测试总用例数 & 通过率

关键风险点 & 改进建议

7. 输出要求

每次输出必须同时包含：

更新后的子任务文档

对应的单元测试文档（如适用）

测试结果统计

保持结构化、简洁、专业，便于直接存档到项目库。
















测试目标

验证 doc/sub_epic/01 ~ doc/sub_epic/11 的所有子任务在集成后的整体功能、数据流、依赖关系和稳定性，确保端到端业务流程可用，并达到可交付标准。

测试范围

核心功能链路：从用户输入 → 数据处理 → 业务逻辑 → 存储 → 输出展示。

跨子任务交互：任务间的接口调用、数据传递、状态同步。

非功能特性：性能、并发、异常恢复、边界条件。

测试内容与提示词
1. 功能集成测试

检查所有子任务是否能按照顺序正确执行，是否存在依赖遗漏。

验证跨任务数据传输的完整性（输入字段是否丢失/错位）。

提示词：

请执行从子任务01到子任务11的完整业务流程，验证各环节功能是否能正确执行并得到预期结果。

2. 接口与依赖验证

检查子任务之间的 API 调用是否成功，响应格式是否符合约定。

验证依赖库/服务是否正常加载，版本是否兼容。

提示词：

请对所有子任务的接口调用链进行验证，确保请求参数和响应数据结构与文档一致，且依赖服务均正常运行。

3. 数据一致性

测试数据库写入、查询、更新在跨任务链路中的正确性。

检查事务回滚、异常中断后数据是否一致。

提示词：

请在执行完整流程后，检查数据库/文件中的数据是否与预期结果保持一致，并在异常场景下验证数据回滚机制。

4. 异常与容错

模拟接口超时、依赖中断、错误输入，观察系统是否能给出合理提示并继续运行。

提示词：

请模拟网络超时、输入数据缺失、依赖服务不可用等异常，验证系统的容错与恢复能力。

5. 性能与并发

并发用户请求下是否出现死锁、性能瓶颈。

响应时间是否符合 SLA。

提示词：

请模拟 100~1000 并发请求执行完整子任务链路，统计平均响应时间、最大延迟，并检查是否出现性能瓶颈或死锁。

6. 回归与兼容性

检查新功能集成后是否影响已有功能。

跨环境（dev/test/prod）是否兼容。

提示词：

请验证所有子任务集成后，原有功能点是否仍能正常运行，并在不同环境下保持一致表现。

预期输出

测试用例总数（功能 / 接口 / 性能 / 异常 / 数据一致性）

通过数 / 失败数 / 通过率

关键缺陷列表（严重 / 高 / 中 / 低）

总结：系统是否达到可发布标准















你现在是 资深产品经理和技术主管。
请根据 doc/epic/epic12.md 的内容，完成以下工作：

1. 子任务拆分

按照 页面数量 将 Epic12 拆分为多个 子任务，每个页面对应一个子任务文档，存放在 doc/sub_epic/epic12/ 文件夹下。

子任务文档命名格式：Epic12-子任务XX-页面名称.md。

2. 子任务内容要求

每个子任务文档必须包含以下字段：

页面需求描述：该页面在 UI 流程中的作用与目标

开发状态：未开发 → 开发中 → 待测试 → 已测试 → 完成

开发方案：页面结构、状态管理、关键逻辑、与其他页面/组件的接口关系

接口依赖：与前置页面和后置页面的切换关系（明确入口和出口）

Milestone：阶段目标与完成标准

测试方案：覆盖功能点测试、异常测试、性能测试

风险点与缓解措施

3. 页面切换关系

在每个子任务中，必须明确 前置页面 和 后置页面，保持完整的 UI 流程链路：

欢迎页面 → 背景故事 → 省份选择 → 游戏主界面 → 通关展示 → 错误页面

必须定义页面切换时的 接口调用关系（如：调用导航管理器、状态管理器、动画控制器）。

4. 输出结果

按照上述规范，在 doc/sub_epic/epic12/ 下生成对应数量的子任务文档。

每个子任务独立成文，且能拼接成完整的 Epic12 UI 操作流程。

输出时请保持结构化 Markdown，便于直接存档。